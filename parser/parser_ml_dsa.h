/*
 * Copyright (C) 2024, Stephan Mueller <smueller@chronox.de>
 *
 * License: see LICENSE file
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ALL OF
 * WHICH ARE HEREBY DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF NOT ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

#ifndef _PARSER_ML_DSA_H
#define _PARSER_ML_DSA_H

#include "parser_flags.h"
#include "stringhelper.h"

#ifdef __cplusplus
extern "C"
{
#endif

/**
 * @brief FIPS 204 ML-DSA key generation cipher data structure holding
 *	  the data for the cipher operations specified in ml_dsa_keygen
 *	  backend
 *
 * @var seed [in] Seed for key generation in binary form
 * @var pk [out] Generated public key in binary form.
 *		 Note, the backend must allocate the buffer of the right
 *		 size before storing data in it. The parser frees the memory.
 * @var sk [out] Generated secret key in binary form.
 *		 Note, the backend must allocate the buffer of the right
 *		 size before storing data in it. The parser frees the memory.
 * @var cipher [in] Cipher specification as defined in cipher_definitions.h
 */
struct ml_dsa_keygen_data {
	struct buffer seed;
	struct buffer pk;
	struct buffer sk;
	uint64_t cipher;
};

/**
 * @brief FIPS 204 ML-DSA signature generation cipher data structure holding
 *	  the data for the cipher operations specified in ml_dsa_siggen
 *	  backend
 *
 * Note: The backend is expected to generate a key pair for the signature
 * operation and report the public key back.
 *
 * @var msg [in] Message to be signed
 * @var sig [out] Signature to be created
 *		  Note, the backend must allocate the buffer of the right
 *		  size before storing data in it. The parser frees the memory.
 * @var pk [ignore] Variable managed by parser via ml_dsa_keygen_en
 * @var rnd [in] Random number for signature generation
 *		     When (parsed_flags & FLAG_OP_ML_DSA_TYPE_MASK) ==
 *			   FLAG_OP_ML_DSA_TYPE_NONDETERMINISTIC
 *			   then: When rnd->len == 0 then generate the rnd buffer
 *				 filled with the used random value, else use
 *				 the value in rnd as the random value
 *		     When (parsed_flags & FLAG_OP_ML_DSA_TYPE_MASK) ==
 *			   FLAG_OP_ML_DSA_TYPE_DETERMINISTIC
 *			S   then: perform deterministic signature generation
 * @var privkey [in] ML-DSA secret key to be used for signature generation as
 *		     generated by ml_dsa_keygen_en. NOTE: if this pointer is
 *		     present, sk is not used.
 * @var sk [in] ML-DSA secret key to be used for signature generation as
 *		provided by the ACVP server. NOTE: if this buffer is present,
 *		privkey is not used.
 * @var cipher [in] Cipher specification as defined in cipher_definitions.h
 */
struct ml_dsa_siggen_data {
	struct buffer msg;
	struct buffer sig;
	struct buffer pk;
	struct buffer rnd;
	struct buffer sk;
	void *privkey;
	uint64_t cipher;
};

/**
 * @brief FIPS 204 ML-DSA signature verification cipher data structure holding
 *	  the data for the cipher operations specified in ml_dsa_sigver
 *	  backend
 *
 * @var msg [in] Message to be signed
 * @var sig [in] Signature to be verified
 * @var pk [in] Public key in binary form to be used for the verification op.
 * @var cipher [in] Cipher specification as defined in cipher_definitions.h
 * @var sigver_success [out] Is ML-DSA signature verification with given
 *			     parameters successful (1) or whether it
 *			     failed (0).
 */
struct ml_dsa_sigver_data {
	struct buffer msg;
	struct buffer sig;
	struct buffer pk;
	uint64_t cipher;
	uint32_t sigver_success;
};

/**
 * @brief Callback data structure that must be implemented by the backend.
 *
 * All functions return 0 on success or != 0 on error.
 *
 * @var ml_dsa_keygen Perform a ML-DSA key generation operation with the given
 *		      data.
 * @var ml_dsa_siggen Perform a ML-DSA signature generation operation with the
 *		      given data.
 * @var ml_dsa_sigver Perform a ML-DSA signature verification operation with the
 *		      given data.
 *
 * @var ml_dsa_keygen_en This is an required helper call to reduce the amount
 *			 of code in the backend for signature generation. The
 *			 ACVP protocol requires that the same ML-DSA key is used
 *			 for multiple signature generation operation. Yet,
 *			 the module must generate the ML-DSA key. To allow the
 *			 ACVP Parser to manage the ML-DSA key and invoke the
 *			 ML-DSA key generation, you must provide this function
 *			 with the following parameters:
 * 			 @var cipher [in] ML-DSA cipher type
 *			 @var pk [out] Buffer filled with the public key.
 *			 @var sk [out] Pointer to secret key.
 * @var ml_dsa_free_key Free secret key
 */

struct ml_dsa_backend {
	int (*ml_dsa_keygen)(struct ml_dsa_keygen_data *data,
			     flags_t parsed_flags);
	int (*ml_dsa_siggen)(struct ml_dsa_siggen_data *data,
			     flags_t parsed_flags);
	int (*ml_dsa_sigver)(struct ml_dsa_sigver_data *data,
			     flags_t parsed_flags);

	int (*ml_dsa_keygen_en)(uint64_t cipher, struct buffer *pk,
				void **sk);
	void (*ml_dsa_free_key)(void *sk);
};

void register_ml_dsa_impl(struct ml_dsa_backend *implementation);

#ifdef __cplusplus
}
#endif

#endif /* _PARSER_ML_DSA_H */
