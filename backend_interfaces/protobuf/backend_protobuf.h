/*
 * Copyright (C) 2024, Stephan Mueller <smueller@chronox.de>
 *
 * License: see LICENSE file in root directory
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ALL OF
 * WHICH ARE HEREBY DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF NOT ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

#ifndef BACKEND_PROTOBUF_H
#define BACKEND_PROTOBUF_H

#include "frontend_headers.h"

#ifdef __cplusplus
extern "C" {
#endif

enum pb_message_type {
	PB_UNKNOWN,

	PB_SHA,
	PB_SHA_MCP_INNER_LOOP,

	PB_SYM_ENCRYPT,
	PB_SYM_DECRYPT,
	PB_SYM_MCT_INIT,
	PB_SYM_MCT_UPDATE,
	PB_SYM_MCT_FINAL,
	PB_AEAD_GCM_ENCRYPT,
	PB_AEAD_GCM_DECRYPT,
	PB_AEAD_CCM_ENCRYPT,
	PB_AEAD_CCM_DECRYPT,
	PB_CSHAKE,
	PB_HMAC,
	PB_KMAC_GENERATE,
	PB_KMAC_VERIFY,

	PB_RSA_KEYGEN,
	PB_RSA_SIGGEN,
	PB_RSA_SIGVER,
	PB_RSA_KEYGEN_PRIME,
	PB_RSA_KEYGEN_PROV_PRIME,
	PB_RSA_KEYGEN_EN,
	PB_RSA_FREE_KEY,
	PB_RSA_SIG_PRIMITIVE,
	PB_RSA_DEC_PRIMITIVE,

	PB_DRBG,

	PB_ECDH_SS,
	PB_ECDH_SS_VER,

	PB_ECDSA_KEYGEN,
	PB_ECDSA_KEYGEN_EXTRA,
	PB_ECDSA_PKVVER,
	PB_ECDSA_SIGGEN,
	PB_ECDSA_SIGVER,
	PB_ECDSA_KEYGEN_EN,
	PB_ECDSA_FREE_KEY,

	PB_KDF_108,
	PB_KDF_108_KMAC,
	PB_PBKDF,
	PB_HKDF,

	PB_ML_DSA_KEYGEN,
	PB_ML_DSA_SIGGEN,
	PB_ML_DSA_SIGVER,
	PB_ML_DSA_KEYGEN_EN,
	PB_ML_DSA_FREE_KEY,

	PB_ML_KEM_KEYGEN,
	PB_ML_KEM_ENCAP,
	PB_ML_KEM_DECAP,

	PB_EDDSA_KEYGEN,
	PB_EDDSA_KEYVER,
	PB_EDDSA_SIGGEN,
	PB_EDDSA_SIGVER,
	PB_EDDSA_KEYGEN_EN,
	PB_EDDSA_FREE_KEY,

	PB_SLH_DSA_KEYGEN,
	PB_SLH_DSA_SIGGEN,
	PB_SLH_DSA_SIGVER,
};

/* All values are little endian values - thus proper bitswap is needed */
typedef struct {
	uint32_t message_type;
	uint32_t implementation;
	uint64_t parsed_flags;
	uint64_t datalen;
} __attribute__((packed)) pb_header_t;

#define PB_BUF_WRITE_HEADER_SZ (sizeof(pb_header_t))


#ifdef __cplusplus
}
#endif

#endif /* BACKEND_PROTOBUF_H */
